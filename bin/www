#!/usr/bin/env node
let fileSettings = (process.argv.length > 2) ? '.' + process.argv[2] : '';

const fs        = require('fs');
const app       = require('../app');
const settings  = require('../settings' + fileSettings + '.js');
const protocol  = settings.protocol;
const port      = settings.port;

let server;

if(protocol === 'https') {

    const https       = require('https');
    const privateKey  = fs.readFileSync('./keys/privkey.pem', 'utf8');
    const certificate = fs.readFileSync('./keys/fullchain.pem', 'utf8');
    const credentials = {key: privateKey, cert: certificate};

    server = https.createServer(credentials, app);

} else {

    const http    = require('http');

    server = http.createServer(app);

}

app.set('port', port);

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);


/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {

    let addr = server.address();
    let bind = typeof addr === 'string'
        ? 'pipe ' + addr
        : 'port ' + addr.port;
  
    console.log();
    console.log('  >> Using settings file   settings' + fileSettings + '.js');
    console.log('  >> Using redirect Uri    ' + settings.redirectUri);
    console.log('  >> Listening on port     ' + bind);
    console.log();

}
