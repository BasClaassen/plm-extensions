#!/usr/bin/env node
let fileSettings = (process.argv.length > 2) ? '/settings/' + process.argv[2] + '.js' : '/settings.js';

const fs  = require('fs');
const app = require('../app');

let server, settings, protocol, port;

if ((process.argv.length < 2) || (fs.existsSync('.' + fileSettings))) {

  settings = require('..' + fileSettings);
  protocol = settings.protocol;
  port     = settings.port;

  if (protocol === 'https') {

    if (fs.existsSync('./keys/privkey.pem')) {

      const https       = require('https');
      const privateKey  = fs.readFileSync('./keys/privkey.pem', 'utf8');
      const certificate = fs.readFileSync('./keys/fullchain.pem', 'utf8');
      const credentials = { key: privateKey, cert: certificate };

      server = https.createServer(credentials, app);

    } else {

      console.log();
      console.log('  ERROR ! File privkey.pem not available in folder /keys');
      console.log('        ! Server will be started using http instead of https');
      console.log();

      const http = require('http');

      server = http.createServer(app);

    }

  } else {

    const http = require('http');

    server = http.createServer(app);

  }

  app.set('port', port);

  server.listen(port);
  server.on('error', onError);
  server.on('listening', onListening);

}


/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {

  let addr = server.address();
  let bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;

  console.log();
  console.log('  >> Using settings file   ' + fileSettings);
  console.log('  >> Using redirect Uri    ' + settings.redirectUri);
  console.log('  >> Listening on          ' + bind);
  console.log();
  console.log('  IMPORTANT NOTICE');
  console.log(' -------------------------------------------------------------------------------------------');
  console.log('  Since the release of July 2024, the authentication uses PKCE instead of the clientSecret.');
  console.log('  Make sure to use an APS application of type "Desktop, Mobile, Single-Page App" as logins');
  console.log('  will fail with error code 401 otherwise. Provide the given clientID in settings.js');
  console.log('  as usual.');
  console.log('  You may have to run npm install again to download the additional module "crypto".');
  console.log();

}